{"ast":null,"code":"import { useState } from \"react\";\nexport const setStoreUserDetails = userDetails => ({\n  type: 'SET_USER_DETAILS',\n  userDetails\n});\nexport const setStoreUserInformation = userInformation => ({\n  type: 'SET_USER_INFORMATION',\n  userInformation\n}); //USEFUL FUNCTIONS\n\nexport function useFormFields(initialState) {\n  const [fields, setValues] = useState(initialState);\n  return [fields, function (event) {\n    setValues({ ...fields,\n      [event.target.name]: event.target.value\n    });\n  }];\n}\nexport const redirectByRole = (role, props) => {\n  switch (role) {\n    case \"doctor\":\n      props.history.push(\"/doctor\");\n      return;\n\n    case \"assistant\":\n      props.history.push(\"/assistant\");\n      return;\n\n    case \"patient\":\n      props.history.push(\"/patient\");\n      return;\n\n    case \"register\":\n      props.history.push(\"/register\");\n      return;\n\n    default:\n      props.history.push(\"/\");\n      return;\n  }\n};\nexport const sendRequestByGivenDetails = (url, method, body, headers, setInStateFunction, specialFunction) => {\n  let init = {\n    method: method,\n    async: false,\n    headers: headers\n  };\n\n  if (body) {\n    init.body = JSON.stringify(body);\n  }\n\n  fetch(url, init).then(response => response.json()).then(responseJSONData => {\n    if (setInStateFunction && specialFunction) {\n      setInStateFunction(responseJSONData);\n      specialFunction(responseJSONData);\n    } else if (setInStateFunction) {\n      setInStateFunction(responseJSONData);\n    } else if (specialFunction) {\n      specialFunction(responseJSONData);\n    }\n  });\n};","map":{"version":3,"sources":["/home/bq666/Workspace/Clinics-MSSC/Front/clinicfront/src/actions/index.js"],"names":["useState","setStoreUserDetails","userDetails","type","setStoreUserInformation","userInformation","useFormFields","initialState","fields","setValues","event","target","name","value","redirectByRole","role","props","history","push","sendRequestByGivenDetails","url","method","body","headers","setInStateFunction","specialFunction","init","async","JSON","stringify","fetch","then","response","json","responseJSONData"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,WAAW,KAAK;AAC/CC,EAAAA,IAAI,EAAE,kBADyC;AAE/CD,EAAAA;AAF+C,CAAL,CAAvC;AAKP,OAAO,MAAME,uBAAuB,GAAGC,eAAe,KAAK;AACvDF,EAAAA,IAAI,EAAE,sBADiD;AAEvDE,EAAAA;AAFuD,CAAL,CAA/C,C,CAKP;;AAEA,OAAO,SAASC,aAAT,CAAuBC,YAAvB,EAAqC;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACO,YAAD,CAApC;AAEA,SAAO,CACHC,MADG,EAEH,UAASE,KAAT,EAAgB;AACZD,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,OAACE,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAF5B,KAAD,CAAT;AAIH,GAPE,CAAP;AASH;AAED,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,UAAQD,IAAR;AACI,SAAK,QAAL;AACIC,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,SAAnB;AACA;;AACJ,SAAK,WAAL;AACIF,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,YAAnB;AACA;;AACJ,SAAK,SAAL;AACIF,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,UAAnB;AACA;;AACJ,SAAK,UAAL;AACIF,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,WAAnB;AACA;;AACJ;AACIF,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACA;AAfR;AAiBH,CAlBM;AAoBP,OAAO,MAAMC,yBAAyB,GAAG,CACrCC,GADqC,EAErCC,MAFqC,EAGrCC,IAHqC,EAIrCC,OAJqC,EAKrCC,kBALqC,EAMrCC,eANqC,KAOpC;AACD,MAAIC,IAAI,GAAG;AACPL,IAAAA,MAAM,EAAEA,MADD;AAEPM,IAAAA,KAAK,EAAE,KAFA;AAGPJ,IAAAA,OAAO,EAAEA;AAHF,GAAX;;AAMA,MAAID,IAAJ,EAAS;AACLI,IAAAA,IAAI,CAACJ,IAAL,GAAYM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAZ;AACH;;AAEDQ,EAAAA,KAAK,CAACV,GAAD,EAAMM,IAAN,CAAL,CACKK,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWG,gBAAD,IAAsB;AACxB,QAAIV,kBAAkB,IAAIC,eAA1B,EAA0C;AACtCD,MAAAA,kBAAkB,CAACU,gBAAD,CAAlB;AACAT,MAAAA,eAAe,CAACS,gBAAD,CAAf;AACH,KAHD,MAGM,IAAIV,kBAAJ,EAAuB;AACzBA,MAAAA,kBAAkB,CAACU,gBAAD,CAAlB;AACH,KAFK,MAEA,IAAIT,eAAJ,EAAoB;AACtBA,MAAAA,eAAe,CAACS,gBAAD,CAAf;AACH;AACJ,GAXL;AAYH,CA9BM","sourcesContent":["import {useState} from \"react\";\n\nexport const setStoreUserDetails = userDetails => ({\n    type: 'SET_USER_DETAILS',\n    userDetails\n});\n\nexport const setStoreUserInformation = userInformation => ({\n    type: 'SET_USER_INFORMATION',\n    userInformation\n});\n\n//USEFUL FUNCTIONS\n\nexport function useFormFields(initialState) {\n    const [fields, setValues] = useState(initialState);\n\n    return [\n        fields,\n        function(event) {\n            setValues({\n                ...fields,\n                [event.target.name]: event.target.value\n            });\n        }\n    ];\n}\n\nexport const redirectByRole = (role, props) => {\n    switch (role) {\n        case \"doctor\":\n            props.history.push(\"/doctor\");\n            return;\n        case \"assistant\":\n            props.history.push(\"/assistant\");\n            return;\n        case \"patient\":\n            props.history.push(\"/patient\");\n            return;\n        case \"register\":\n            props.history.push(\"/register\");\n            return;\n        default:\n            props.history.push(\"/\");\n            return;\n    }\n};\n\nexport const sendRequestByGivenDetails = (\n    url,\n    method,\n    body,\n    headers,\n    setInStateFunction,\n    specialFunction,\n) => {\n    let init = {\n        method: method,\n        async: false,\n        headers: headers,\n    };\n\n    if (body){\n        init.body = JSON.stringify(body)\n    }\n\n    fetch(url, init)\n        .then((response) => response.json())\n        .then((responseJSONData) => {\n            if (setInStateFunction && specialFunction){\n                setInStateFunction(responseJSONData);\n                specialFunction(responseJSONData);\n            }else if (setInStateFunction){\n                setInStateFunction(responseJSONData);\n            }else if (specialFunction){\n                specialFunction(responseJSONData);\n            }\n        })\n};\n"]},"metadata":{},"sourceType":"module"}